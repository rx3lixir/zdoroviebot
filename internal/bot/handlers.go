package bot

import (
	"context"
	"fmt"
	"strings"

	"github.com/charmbracelet/log"
	"github.com/rx3lixir/zdoroviebot/internal/db"
	"github.com/rx3lixir/zdoroviebot/internal/models"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"gopkg.in/telebot.v3"
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ callback-–¥–∞–Ω–Ω—ã—Ö
const (
	recipePrefix     = "recipe_"
	ingredientPrefix = "ingr_"
	searchPrefix     = "search_"
)

// BotHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
type BotHandler struct {
	bot        *telebot.Bot
	repo       db.RecipeRepository
	logger     *log.Logger
	msgBuilder *MessageBuilder
}

// NewBotHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
func NewBotHandler(bot *telebot.Bot, repo db.RecipeRepository, logger *log.Logger) *BotHandler {
	return &BotHandler{
		bot:        bot,
		repo:       repo,
		logger:     logger,
		msgBuilder: NewMessageBuilder(),
	}
}

// –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
var userIngredients = make(map[int64]map[string]bool)

// RegisterHandlers —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
func (h *BotHandler) RegisterHandlers() {
	h.bot.Handle("/start", h.handleStart)
	h.bot.Handle("/recipes", h.handleRecipes)
	h.bot.Handle("/ingredients", h.handleIngredients) // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	h.bot.Handle(telebot.OnCallback, h.handleCallback)
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *BotHandler) handleStart(c telebot.Context) error {
	welcomeMsg := "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–ü –ë–æ—Ç –ê–ª—Ç–∞–π—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã +100 –∫ –∑–¥–æ—Ä–æ–≤—å—é!\n\n" +
		"üå± –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.\n" +
		"üîç –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /recipes, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã."

	return c.Send(welcomeMsg)
}

// handleRecipes –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /recipes
func (h *BotHandler) handleRecipes(c telebot.Context) error {
	ctx := context.Background()

	recipes, err := h.repo.GetAllRecipes(ctx)
	if err != nil {
		h.logger.Error("failed to get recipes", "error", err)
		return c.Send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	if len(recipes) == 0 {
		return c.Send("üì≠ –†–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
	}

	markup := h.createRecipesKeyboard(recipes)
	return c.Send("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", markup)
}

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
func (h *BotHandler) handleCallback(c telebot.Context) error {
	ctx := context.Background()
	data := c.Callback().Data
	userID := c.Sender().ID

	// -- –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ò–ù–ì–†–ò–î–ò–ï–ù–¢–û–í -- \\
	if strings.HasPrefix(data, ingredientPrefix) {
		ingredient := strings.TrimPrefix(data, ingredientPrefix)

		// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞
		if userIngredients[userID] == nil {
			userIngredients[userID] = make(map[string]bool)
		}

		userIngredients[userID][ingredient] = !userIngredients[userID][ingredient]

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		ingredients, err := h.repo.GetAllBaseIngredients(ctx)
		if err != nil {
			h.logger.Error("Failed to get all base ingredients", "error", err)
			return c.Respond()
		}

		markup := h.createIngredientsKeyboard(ingredients, userID)
		return c.Edit("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å", markup)
	}

	// -- –û–ë–†–ê–ë–û–¢–ö–ê –ü–û –í–´–ë–†–ê–ù–ù–´–ú –ò–ì–†–ò–î–ò–ï–ù–¢–ê–ú -- \\
	if strings.HasPrefix(data, searchPrefix) {

		// –°–æ–±–∏—Ä–∞–µ–º–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã
		var selectedIngredients []string

		for ingredient, selected := range userIngredients[userID] {
			if selected {
				selectedIngredients = append(selectedIngredients, ingredient)
			}
		}

		if len(selectedIngredients) == 0 {
			return c.Respond(&telebot.CallbackResponse{
				Text:      "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç",
				ShowAlert: true,
			})
		}

		recipes, err := h.repo.FindRecipesByIngredients(ctx, selectedIngredients)
		if err != nil {
			h.logger.Error("Failed to find recipes by ingredients", "error", err)
			return c.Respond(&telebot.CallbackResponse{
				Text:      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤",
				ShowAlert: true,
			})
		}

		if len(recipes) == 0 {
			return c.Edit(fmt.Sprintf("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏ %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", strings.Join(selectedIngredients, ", ")))
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
		resultMessage := fmt.Sprintf("–ù–∞–π–¥–µ–Ω–æ %d —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏: \n%s",
			len(recipes),
			strings.Join(selectedIngredients, ", "))

		markup := h.createRecipesKeyboard(recipes)
		return c.Edit(resultMessage, markup)
	}

	// -- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤-- \\
	if strings.HasPrefix(data, recipePrefix) {

		recipeID := strings.TrimPrefix(data, recipePrefix)

		objID, err := primitive.ObjectIDFromHex(recipeID)
		if err != nil {
			h.logger.Error("invalid recipe ID format", "id", recipeID, "error", err)
			return c.Respond(&telebot.CallbackResponse{
				Text:      "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–µ—Ü–µ–ø—Ç–∞",
				ShowAlert: true,
			})
		}

		recipe, err := h.repo.GetRecipeByID(ctx, objID)
		if err != nil {
			h.logger.Error("failed to get recipe by ID", "id", recipeID, "error", err)
			return c.Respond(&telebot.CallbackResponse{
				Text:      "‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
				ShowAlert: true,
			})
		}

		detailsMsg := h.msgBuilder.BuildRecipeDetails(recipe)
		return c.Edit(detailsMsg, telebot.ModeMarkdown)
	}

	h.logger.Warn("Unknown callback data", "data", data)
	return c.Respond()
}

func (h *BotHandler) handleIngredients(c telebot.Context) error {
	ctx := context.Background()

	ingredients, err := h.repo.GetAllBaseIngredients(ctx)
	if err != nil {
		h.logger.Error("Failed to get base ingredients", "error", err)
		return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	if len(ingredients) == 0 {
		return c.Send("–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –≤—ã–±–∞—Ä–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—Å—Ç—ã–ª—å –ø–∏–∑–¥–µ—Ü)
	userID := c.Sender().ID
	userIngredients[userID] = make(map[string]bool)

	markup := h.createIngredientsKeyboard(ingredients, userID)
	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å:", markup)
}

func (h *BotHandler) createIngredientsKeyboard(ingredients []string, userID int64) *telebot.ReplyMarkup {
	markup := &telebot.ReplyMarkup{}

	// –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
	const buttonsPerRow = 2
	var currentRow []telebot.InlineButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞
	for i, ingredient := range ingredients {
		selected := userIngredients[userID][ingredient]

		// –ì–∞–ª–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
		buttonText := ingredient
		if selected {
			buttonText = "‚úÖ " + ingredient
		}

		button := telebot.InlineButton{
			Text: buttonText,
			Data: fmt.Sprintf("%s%s", ingredientPrefix, ingredient),
		}

		currentRow = append(currentRow, button)

		// –ï—Å–ª–∏ —Ä—è–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		if len(currentRow) == buttonsPerRow || i == len(ingredients)-1 {
			markup.InlineKeyboard = append(markup.InlineKeyboard, currentRow)
			currentRow = []telebot.InlineButton{}
		}

	}
	searchButton := telebot.InlineButton{
		Text: "üîç –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã",
		Data: fmt.Sprintf("%s%d", searchPrefix, userID),
	}

	// –û—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
	searchRow := []telebot.InlineButton{searchButton}
	markup.InlineKeyboard = append(markup.InlineKeyboard, searchRow)

	return markup
}

// createRecipesKeyboard —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
func (h *BotHandler) createRecipesKeyboard(recipes []models.Recipe) *telebot.ReplyMarkup {
	markup := &telebot.ReplyMarkup{}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
	const buttonsPerRow = 2
	var currentRow []telebot.InlineButton

	for i, recipe := range recipes {
		button := telebot.InlineButton{
			Text: recipe.Name,
			Data: fmt.Sprintf("recipe_%s", recipe.ID.Hex()),
		}

		currentRow = append(currentRow, button)

		if len(currentRow) == buttonsPerRow || i == len(recipes)-1 {
			markup.InlineKeyboard = append(markup.InlineKeyboard, currentRow)
			currentRow = []telebot.InlineButton{}
		}
	}

	return markup
}

// MessageBuilder —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type MessageBuilder struct{}

// NewMessageBuilder —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±–∏–ª–¥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
func NewMessageBuilder() *MessageBuilder {
	return &MessageBuilder{}
}

// BuildRecipeDetails —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ
func (mb *MessageBuilder) BuildRecipeDetails(recipe *models.Recipe) string {
	return fmt.Sprintf(
		"*%s*\n\n"+
			"üßÇ *–ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç—ã:*\n%s, %s\n\n"+
			"üî• *–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è*:\n%s\n\n"+
			"‚ö° *–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å*:\n"+
			"–ö–∞–ª–æ—Ä–∏–∏: %d –∫–∫–∞–ª\n"+
			"–ë–µ–ª–∫–∏: %.1f –≥\n"+
			"–ñ–∏—Ä—ã: %.1f –≥\n"+
			"–£–≥–ª–µ–≤–æ–¥—ã: %.1f –≥",
		recipe.Name,
		strings.Join(recipe.ExtraIngredients, ", "),
		strings.Join(recipe.BaseIngredients, ", "),
		recipe.Procedure,
		recipe.Nutrition.Calories,
		recipe.Nutrition.Proteins,
		recipe.Nutrition.Fats,
		recipe.Nutrition.Carbs,
	)
}
