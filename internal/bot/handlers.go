package bot

import (
	"context"
	"fmt"
	"strings"

	"github.com/charmbracelet/log"
	"github.com/rx3lixir/zdoroviebot/internal/db"
	"github.com/rx3lixir/zdoroviebot/internal/models"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"gopkg.in/telebot.v3"
)

// BotHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
type BotHandler struct {
	bot        *telebot.Bot
	repo       db.RecipeRepository
	logger     *log.Logger
	msgBuilder *MessageBuilder
}

// NewBotHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
func NewBotHandler(bot *telebot.Bot, repo db.RecipeRepository, logger *log.Logger) *BotHandler {
	return &BotHandler{
		bot:        bot,
		repo:       repo,
		logger:     logger,
		msgBuilder: NewMessageBuilder(),
	}
}

// RegisterHandlers —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
func (h *BotHandler) RegisterHandlers() {
	h.bot.Handle("/start", h.handleStart)
	h.bot.Handle("/recipes", h.handleRecipes)
	h.bot.Handle(telebot.OnCallback, h.handleCallback)
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *BotHandler) handleStart(c telebot.Context) error {
	welcomeMsg := "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–ü –ë–æ—Ç –ê–ª—Ç–∞–π—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã +100 –∫ –∑–¥–æ—Ä–æ–≤—å—é!\n\n" +
		"üå± –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.\n" +
		"üîç –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /recipes, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã."

	return c.Send(welcomeMsg)
}

// handleRecipes –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /recipes
func (h *BotHandler) handleRecipes(c telebot.Context) error {
	ctx := context.Background()

	recipes, err := h.repo.GetAllRecipes(ctx)
	if err != nil {
		h.logger.Error("failed to get recipes", "error", err)
		return c.Send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	if len(recipes) == 0 {
		return c.Send("üì≠ –†–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
	}

	markup := h.createRecipesKeyboard(recipes)
	return c.Send("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", markup)
}

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
func (h *BotHandler) handleCallback(c telebot.Context) error {
	ctx := context.Background()
	data := c.Callback().Data

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
	const recipePrefix = "recipe_"

	if !strings.HasPrefix(data, recipePrefix) {
		h.logger.Warn("unknown callback data", "data", data)
		return c.Respond()
	}

	recipeID := strings.TrimPrefix(data, recipePrefix)

	objID, err := primitive.ObjectIDFromHex(recipeID)
	if err != nil {
		h.logger.Error("invalid recipe ID format", "id", recipeID, "error", err)
		return c.Respond(&telebot.CallbackResponse{
			Text:      "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–µ—Ü–µ–ø—Ç–∞",
			ShowAlert: true,
		})
	}

	recipe, err := h.repo.GetRecipeByID(ctx, objID)
	if err != nil {
		h.logger.Error("failed to get recipe by ID", "id", recipeID, "error", err)
		return c.Respond(&telebot.CallbackResponse{
			Text:      "‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
			ShowAlert: true,
		})
	}

	detailsMsg := h.msgBuilder.BuildRecipeDetails(recipe)
	return c.Edit(detailsMsg, telebot.ModeMarkdown)
}

// createRecipesKeyboard —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
func (h *BotHandler) createRecipesKeyboard(recipes []models.Recipe) *telebot.ReplyMarkup {
	markup := &telebot.ReplyMarkup{}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
	const buttonsPerRow = 2
	var currentRow []telebot.InlineButton

	for i, recipe := range recipes {
		button := telebot.InlineButton{
			Text: recipe.Name,
			Data: fmt.Sprintf("recipe_%s", recipe.ID.Hex()),
		}

		currentRow = append(currentRow, button)

		if len(currentRow) == buttonsPerRow || i == len(recipes)-1 {
			markup.InlineKeyboard = append(markup.InlineKeyboard, currentRow)
			currentRow = []telebot.InlineButton{}
		}
	}

	return markup
}

// MessageBuilder —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type MessageBuilder struct{}

// NewMessageBuilder —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±–∏–ª–¥–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
func NewMessageBuilder() *MessageBuilder {
	return &MessageBuilder{}
}

// BuildRecipeDetails —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ü–µ–ø—Ç–µ
func (mb *MessageBuilder) BuildRecipeDetails(recipe *models.Recipe) string {
	return fmt.Sprintf(
		"*%s*\n\n"+
			"üçΩ *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã*:\n%s\n\n"+
			"üßÇ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã*:\n%s\n\n"+
			"üî• *–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è*:\n%s\n\n"+
			"‚ö° *–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å*:\n"+
			"–ö–∞–ª–æ—Ä–∏–∏: %d –∫–∫–∞–ª\n"+
			"–ë–µ–ª–∫–∏: %.1f –≥\n"+
			"–ñ–∏—Ä—ã: %.1f –≥\n"+
			"–£–≥–ª–µ–≤–æ–¥—ã: %.1f –≥",
		recipe.Name,
		strings.Join(recipe.BaseIngredients, ", "),
		strings.Join(recipe.ExtraIngredients, ", "),
		recipe.Procedure,
		recipe.Nutrition.Calories,
		recipe.Nutrition.Proteins,
		recipe.Nutrition.Fats,
		recipe.Nutrition.Carbs,
	)
}
