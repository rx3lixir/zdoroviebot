package bot

import (
	"fmt"
	"strings"

	"github.com/charmbracelet/log"
	"github.com/rx3lixir/zdoroviebot/internal/db"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"gopkg.in/telebot.v3"
)

func SetupHandlers(b *telebot.Bot, repo *db.RecipeRepo, logger *log.Logger) error {
	b.Handle("/recipes", func(c telebot.Context) error {
		recipes, err := repo.GetAllRecipes(logger)
		if err != nil {
			logger.Error("Error processing '/recipes' handler", err)
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤")
		}
		if len(recipes) == 0 {
			return c.Send("–†–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
		}

		// –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
		markup := &telebot.ReplyMarkup{}

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ä–∞–∑–º–µ—Ç–∫—É –ø–æ 2 –≤ —Ä—è–¥
		var currentRow []telebot.InlineButton

		for i, r := range recipes {
			button := telebot.InlineButton{
				Text: r.Name,
				Data: "recipe_" + r.ID.Hex(),
			}

			currentRow = append(currentRow, button)

			// –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º —Ä—è–¥—É —É–∂–µ 2 –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			if len(currentRow) == 2 || i == len(recipes)-1 {
				markup.InlineKeyboard = append(markup.InlineKeyboard, currentRow)
				currentRow = []telebot.InlineButton{} // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä—è–¥
			}
		}

		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç:", markup)
	})

	b.Handle(telebot.OnCallback, func(c telebot.Context) error {
		data := c.Callback().Data // –ü–æ–ª—É—á–∞–µ–º callback –¥–∞—Ç—É

		logger.Info("Received callback data:", data) // –õ–æ–≥–∏—Ä—É–µ–º

		recipeID := strings.TrimPrefix(data, "recipe_")

		logger.Info("Extracted recipe ID:", recipeID) // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç –ª–∏ ID
		if recipeID == "" {
			logger.Error("Empty recipe ID in callback", recipeID)
			return c.Respond()
		}

		// –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑–µ –ø–æ ID
		objID, err := primitive.ObjectIDFromHex(recipeID)
		if err != nil {
			logger.Error("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ID", err)
			return c.Respond()
		}

		recipe, err := repo.GetRecipeByID(objID, logger)
		if err != nil {
			logger.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞", recipe)
			return c.Respond()
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
		detailsRecipe := fmt.Sprintf(
			"*%s*\n\nüçΩ *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã*:\n%s\n\nüßÇ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã*:\n%s\n\nüî• *–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è*:\n%s\n\n‚ö° *–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å*:\n–ö–∞–ª–æ—Ä–∏–∏: %d –∫–∫–∞–ª\n–ë–µ–ª–∫–∏: %.1f –≥\n–ñ–∏—Ä—ã: %.1f –≥\n–£–≥–ª–µ–≤–æ–¥—ã: %.1f –≥",
			recipe.Name,
			strings.Join(recipe.BaseIngredients, ", "),
			strings.Join(recipe.ExtraIngredients, ", "),
			recipe.Procedure,
			recipe.Nutrition.Calories,
			recipe.Nutrition.Proteins,
			recipe.Nutrition.Fats,
			recipe.Nutrition.Carbs,
		)

		return c.Edit(detailsRecipe, telebot.ModeMarkdown)

	})

	b.Handle("/start", func(c telebot.Context) error {
		return c.Send("–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
	})
	return nil
}
